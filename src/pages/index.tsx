import { get } from "http";
import { type NextPage } from "next";
import Head from "next/head";
import { FC, useEffect, useState, Dispatch, SetStateAction } from "react";
import { set } from "zod";
import { api } from "~/utils/api";

type Item = {
  id: string;
  name: string;
  checked: boolean;
};

const Home: NextPage = () => {
  const [items, setItems] = useState<Item[]>([]);
  const [checkedItems, setCheckedItems] = useState<Item[]>([]);
  const [openModal, setOpenModal] = useState<boolean>(false);

  const { data: itemsData, isLoading } = api.item.getItems.useQuery(undefined, {
    onSuccess(data) {
      setItems(data);
      const checked = data.filter((data) => data.checked);
      setCheckedItems(checked);
    },
  });

  const deleteItem = api.item.deleteItem.useMutation({
    onSuccess(data) {
      console.log("Deleting Item", data);
    },
  });

  const { mutate: toggleCheck } = api.item.toggleCheck.useMutation({
    onSuccess(data) {
      if (checkedItems.some((item) => item.id === data.id)) {
        setCheckedItems((items) => items.filter((item) => item.id !== data.id));
      } else {
        setCheckedItems((items) => [...items, data]);
      }
    },
  });

  const handleDelete = async (id: string) => {
    await deleteItem.mutateAsync({ id });
    setItems((items) => items.filter((item) => item.id !== id));
  };

  //Loading State
  if (!itemsData || isLoading)
    return (
      <div className=" flex items-center justify-center p-10 text-5xl">
        Loading...
      </div>
    );

  return (
    <>
      <Head>
        <title>Shopping List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {openModal && (
        <ItemModal setOpenModal={setOpenModal} setItems={setItems} />
      )}

      <main className="mx-auto my-12 max-w-3xl">
        <div className="flex flex-row justify-between">
          <h2 className="font-semi text-4xl">My Shopping List</h2>
          <button
            onClick={() => setOpenModal(!openModal)}
            className="rounded-lg px-4 py-1 transition hover:bg-slate-500 hover:text-white"
          >
            Add Note
          </button>
        </div>

        <ul>
          {items.map((item) => (
            <li key={item.id} className="flex flex-row justify-between">
              <div className="flex flex-row items-center">
                <input
                  type="checkbox"
                  checked={checkedItems.some((itemA) => itemA.id === item.id)}
                  onChange={() => {
                    toggleCheck({ id: item.id, checked: !item.checked });
                  }}
                />
                <span
                  className={`ml-2 ${
                    checkedItems.some((itemA) => itemA.id === item.id)
                      ? "line-through"
                      : ""
                  }`}
                >
                  {item.name}
                </span>
              </div>
              <button
                onClick={() => handleDelete(item.id)}
                className="rounded-lg px-4 py-1 transition hover:bg-slate-500 hover:text-white"
              >
                Delete
              </button>
            </li>
          ))}
        </ul>
      </main>
    </>
  );
};

interface ItemModalProps {
  setOpenModal: Dispatch<SetStateAction<boolean>>;
  setItems: Dispatch<SetStateAction<Item[]>>;
}

const ItemModal: FC<ItemModalProps> = ({ setOpenModal, setItems }) => {
  const [item, setItem] = useState<string>("");

  const { mutate: addItem } = api.item.addItem.useMutation({
    onSuccess(data) {
      console.log("Adding Item", data);
      setItems((items) => [...items, data]);
    },
  });

  return (
    <div className="absolute inset-0 flex items-center justify-center bg-black/75">
      <div className=" space-y-3 rounded-lg bg-slate-500 p-5 shadow-lg ">
        <h2>Name of Item </h2>
        <input
          onChange={(e) => setItem(e.target.value)}
          type="text"
          className="
        w-full rounded-lg border border-gray-300 px-3 py-2
        focus:border-transparent focus:outline-none focus:ring-2 focus:ring-slate-500"
        />
        <div className="flex flex-row justify-end">
          <button
            onClick={() => setOpenModal(false)}
            className="rounded-lg px-4 py-1 transition hover:bg-slate-500 hover:text-white"
          >
            Cancel
          </button>
          <button
            onClick={() => {
              addItem({ name: item });
              setOpenModal(false);
            }}
            className="rounded-lg px-4 py-1 transition hover:bg-slate-500 hover:text-white"
          >
            Add
          </button>
        </div>
      </div>
    </div>
  );
};

export default Home;
